
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String   @id @default(cuid())
  userId             String     @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String     @id @default(cuid())
  name          String
  email         String?    @unique
  emailVerified DateTime?  @map("email_verified")
  image         String?
  password      String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  accounts      Account[]
  sessions      Session[]
  folders       Folder[]
  documents     Document[]

  @@map(name: "users")
}

model VerificationToken {
  id       String    @id @default(cuid())
  email    String
  token    String    @unique
  expires  DateTime

  @@unique([email, token])
  @@map("verificationtokens")
}

model PasswordResetToken {
  id      String    @id @default(cuid())
  email   String
  token   String    @unique
  expires DateTime

  @@unique([email, token])
  @@map("passwordresettokens")

}

model Folder {
  id           String   @id @default(uuid())
  index        Int
  title        String
  documents    Document[]
  isArchive    Boolean  @default(false)
  author       User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId     String
  updatedAt    DateTime @default(now())
  createdAt    DateTime @default(now())

  @@map("folders")
}

model Document {
  id           String   @id @default(uuid())
  index        Int
  title        String
  body         String?  @db.VarChar(10000)
  isArchive    Boolean  @default(false)
  folder       Folder   @relation(fields: [folderId], references: [id],  onDelete: Cascade)
  folderId     String
  author       User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId     String
  updatedAt    DateTime @default(now())
  createdAt    DateTime @default(now())

  @@map("documents")
}